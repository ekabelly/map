plot(nov, type = "b")
nov = 1:31
nov[1:length(nov)]
plot(nov, type = "b")
abline(h = 5)
plot(nov, type = "b" col= pink)
plot(nov, type = "b" col = "pink")
nov = 1:31
nov[1:length(nov)]
plot(nov, type = "b" col = "pink")
plot(nov, type = "b" , col = "pink")
plot(nov, type = "b" , col = "green")
plot(nov, type = "b" , col = "brown")
data(co2)
data(co2)
means = aggregate(co2, FUN = mean)
means[1:length(means)]
year = as.vector(time(means))
co2 = as.vector(means)
year[1:length(year)]
plot(year, means,type= "b" )
year2 =as.vector(1998:2018)
year2[1]
year2[1:length(year2)]
yearss= c(year,year2)
yearss[1:length(yearss)]
plot(yearss, means,type= "b" )
co2 = as.vector(means)
co2[1:length(co2)]
length(year2)
length(year2)
length(means)
length(yearss)
mean(means)
diff(4,3,4,5)
year[-1]
year[length]
year[max()]
max.year
year[which.max(year)]
co2[1:length(co2)]
co2 = as.vector(means)
diff(co2)
mean(diff(co2))
data(co2)
means = aggregate(co2, FUN = mean)
length(means)
year = as.vector(time(means))
year2 =as.vector(1998:2018)
co2 = as.vector(means)
mean_after= year[which.max(year)]+mean(diff(co2))*(1:length(year2))
allmean= c(means, mean_after)
yearss= c(year,year2)
yearss[1:length(yearss)]
plot(year, means,type= "b" )
plot(year, means,type= "c" )
plot(year, means,type= "p" )
plot(year, means,type= "o" )
plot(year, means,type= "b" )
plot(year, means,type= "b"
xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',
ylab = 'Co2 (ppm)')
plot(year, means,type= "b" , xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',ylab = 'Co2 (ppm)')
lines(year, co2)
points(year2, mean_after, col="blue")
lines(year, co2)
points(year2, mean_after, col='blue')
lines(year2,mean_after, col = 'blue')
data(co2)
means = aggregate(co2, FUN = mean)
length(means)
year = as.vector(time(means))
year2 =as.vector(1998:2018)
co2 = as.vector(means)
mean_after= year[which.max(year)]+means(diff(co2))*(1:length(year2))
mean_after= year[which.max(year)]+mean(diff(co2))*(1:length(year2))
allmean= c(means, mean_after)
yearss= c(year,year2)
yearss[1:length(yearss)]
plot(year, means,type= "b" , xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',ylab = 'Co2 (ppm)')
plot(year, means,type= "b" , xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',ylab = 'Co2 (ppm)')
points(year2, mean_after, col='blue')
points(year2, mean_after, col='blue')
points(year2, mean_after, col='blue')
data(co2)
data(co2)
means = aggregate(co2, FUN = mean)
length(means)
year = as.vector(time(means))
year2 =as.vector(1998:2018)
co2 = as.vector(means)
mean_after= year[which.max(year)]+mean(diff(co2))*(1:length(year2))
plot(year, means,type= "b" , xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',ylab = 'Co2 (ppm)')
lines(year, co2)
points(year2, mean_after, col='blue')
lines(year2,mean_after, col = 'blue')
data(CO2)
means= aggregate(co2, FUN = mean)
year = as.vector(time(means))
co2= as.vector(means)
years_after= 1998:2018
mean_rate= mean(diff(co2))
co2_after= co2[year==1997]+ mean_rate*(1:length(years_after))
plot(year, co2, xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',
ylab = 'Co2 (ppm)')
lines(year, co2)
points(years_after,co2_after,col='blue')
lines(years_after,co2_after,col='blue')
points(2018, 409.92,col='red')
mean_after
year = as.vector(time(means))
year
data(co2)
means = aggregate(co2, FUN = mean)
year = as.vector(time(means))
co2 = as.vector(means)
year2 =as.vector(1998:2018)
mean_after= year[which.max(year)]+ mean(diff(co2))*(1:length(year2))
plot(year, co2,type= "b" , xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',ylab = 'Co2 (ppm)')
lines(year, co2)
points(year2, mean_after, col='blue')
lines(year2,mean_after, col = 'blue')
data(co2)
means = aggregate(co2, FUN = mean)
year = as.vector(time(means))
co2 = as.vector(means)
year2 =as.vector(1998:2018)
mean_after= year[which.max(year)]+ mean(diff(co2))*(1:length(year2))
plot(year, co2,type= "b" , xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',ylab = 'Co2 (ppm)')
lines(year, co2)
points(year2, mean_after, col='blue')
lines(year2,mean_after, col = 'blue')
points(year2, mean_after, col='blue')
data(co2)
means = aggregate(co2, FUN = mean)
year = as.vector(time(means))
co2 = as.vector(means)
year2 =1998:2018
mean_after= year[which.max(year)]+ mean(diff(co2))*(1:length(year2))
plot(year, co2,type= "b" , xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',ylab = 'Co2 (ppm)')
lines(year, co2)
points(year2, mean_after, col='blue')
lines(year2,mean_after, col = 'blue')
data(co2)
means = aggregate(co2, FUN = mean)
year = as.vector(time(means))
co2 = as.vector(means)
year2 =1998:2018
mean_after= year[which.max(year)]+ mean(diff(co2))*(1:length(year2))
plot(year, co2,type= "b" , xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',ylab = 'Co2 (ppm)')
lines(year, co2)
points(year2, mean_after, col='blue')
lines(year2,mean_after, col = 'blue')
data(CO2)
means= aggregate(co2, FUN = mean)
year = as.vector(time(means))
co2= as.vector(means)
years_after= 1998:2018
mean_rate= mean(diff(co2))
co2_after= co2[year==1997]+ mean_rate*(1:length(years_after))
plot(year, co2, xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',
ylab = 'Co2 (ppm)')
lines(year, co2)
points(years_after,co2_after,col='blue')
lines(years_after,co2_after,col='blue')
points(2018, 409.92,col='red')
co2[year==1997]
data(co2)
means = aggregate(co2, FUN = mean)
year = as.vector(time(means))
co2 = as.vector(means)
year2 = 1998:2018
co2_after= co2[year==1997]+ mean(diff(co2))*(1:length(year2))
plot(year, co2,type= "b" , xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',ylab = 'Co2 (ppm)')
lines(year, co2)
points(year2, co2_after, col='blue')
lines(year2,co2_after, col = 'blue')
data(co2)
means = aggregate(co2, FUN = mean)
year = as.vector(time(means))
co2 = as.vector(means)
year2 = 1998:2018
co2_after= co2[year==1997]+ mean(diff(co2))*(1:length(year2))
plot(year, co2,type= "b" , xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',ylab = 'Co2 (ppm)')
lines(year, co2)
points(year2, co2_after, col='blue')
lines(year2,co2_after, col = 'blue')
points(year2[2018], 409.92, col ='red')
data(co2)
means = aggregate(co2, FUN = mean)
year = as.vector(time(means))
co2 = as.vector(means)
year2 = 1998:2018
co2_after= co2[year==1997]+ mean(diff(co2))*(1:length(year2))
plot(year, co2,type= "b" , xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',ylab = 'Co2 (ppm)')
lines(year, co2)
points(year2, co2_after, col='blue')
lines(year2,co2_after, col = 'blue')
points(year2[2018], 409.92, col ='red')
data(co2)
means = aggregate(co2, FUN = mean)
year = as.vector(time(means))
co2 = as.vector(means)
year2 = 1998:2018
co2_after= co2[year==1997]+ mean(diff(co2))*(1:length(year2))
plot(year, co2,type= "b" , xlim = c(1959,2018),
ylim = c(300,410), xlab = 'Year',ylab = 'Co2 (ppm)')
lines(year, co2)
points(year2, co2_after, col='blue')
lines(year2,co2_after, col = 'blue')
points(year2== 2018,co2_after== 409.92, col ='red')
points( 2018,409.92, col ='red')
# Question 02
read.csv("C://Users//valer//Desktop//rtrain//rainfall.csv",stringsAsFactors = F )
rainfall = read.csv("C://Users//valer//Desktop//rtrain//rainfall.csv", stringsAsFactors = FALSE)  ## Using local path (-5)
rainfall = read.csv("rainfall.csv", stringsAsFactors = FALSE)
m =  c("sep", "oct", "nov", "dec", "jan", "feb", "mar", "apr", "may")
x=rainfall$rainy_months = rowSums(rainfall[,m]<10)
head(rainfall)
rainfall$name[rainfall$rainy_months == 9]
rainfall$name["Eilat" ]
rainfall$name["Eilat"]
rainfall$rainy_months["Eilat"]
m =  c("sep", "oct", "nov", "dec", "jan", "feb", "mar", "apr", "may")
x=rainfall$rainy_months = rowSums(rainfall[,m]<10)
rainfall = read.csv("rainfall.csv", stringsAsFactors = FALSE)
read.csv("C://Users//valer//Desktop//rtrain//rainfall.csv",stringsAsFactors = F )
x=rainfall$rainy_months = rowSums(rainfall[,m]<10)
rainfall$name[rainfall$rainy_months == 9]
dat = data.frame(
name = c("Beer-Sheva Center", "Beer-Sheva University", "Dimona"),
city = c("Beer-Sheva", "Beer-Sheva", "Dimona"),
lines = c(4, 5, 1),
piano = c(FALSE, TRUE, FALSE),
stringsAsFactors = FALSE
)
dat
dat = data.frame(
name = c("Beer-Sheva Center", "Beer-Sheva University", "Dimona"),
city = c("Beer-Sheva", "Beer-Sheva", "Dimona"),
lines = c(4, 5, 1),
piano = c(FALSE, TRUE, FALSE),
stringsAsFactors = FALSE
)
dat
View(dat)
plot(st_geometry(ribua) , add = TRUE, col = 'grey')
install.packages('sf')
library(sf)
install.packages('sf')
install.packages("sf")
library(sf)
pnt = st_point(c(0, 0))
pnt_vert = c(pnt+c(3,0),pnt+c(-3,0))
pnt_vert = st_combine(pnt_vert)
line_vert = st_cast(pnt_vert, "LINESTRING")
buffer_vert = st_buffer(line_vert,1)
pnt_hori = c(pnt+c(0,3),pnt+c(0,-3))
pnt_hori = st_combine(pnt_hori)
line_hori = st_cast(pnt_hori, "LINESTRING")
buffer_hori = st_buffer(line_hori,1)
poly_plus = st_union(buffer_vert,buffer_hori)
plot(poly_plus, col = "grey")
plot(pnt, add = TRUE)
pnt = st_point(c(0, 0))
pnt_vert = c(pnt+c(3,0),pnt+c(-3,0))
pnt_vert = st_combine(pnt_vert)
line_vert = st_cast(pnt_vert, "LINESTRING")
buffer_vert = st_buffer(line_vert,1)
pnt_hori = c(pnt+c(0,3),pnt+c(0,-3))
pnt_hori = st_combine(pnt_hori)
line_hori = st_cast(pnt_hori, "LINESTRING")
buffer_hori = st_buffer(line_hori,1)
poly_plus = st_union(buffer_vert,buffer_hori)
plot(poly_plus, col = "grey")
plot(pnt, add = TRUE)
plot(poly_plus, col = "grey")
plot(pnt, add = TRUE)
pnt = st_point(c(0, 0))
pnt = st_point(c(0, 0))
pnt_vert = c(pnt+c(3,0),pnt+c(-3,0))
pnt_vert = st_combine(pnt_vert)
line_vert = st_cast(pnt_vert, "LINESTRING")
buffer_vert = st_buffer(line_vert,1)
pnt_hori = c(pnt+c(0,3),pnt+c(0,-3))
pnt_hori = st_combine(pnt_hori)
line_hori = st_cast(pnt_hori, "LINESTRING")
buffer_hori = st_buffer(line_hori,1)
poly_plus = st_union(buffer_vert,buffer_hori)
plot(poly_plus, col = "grey")
plot(pnt, add = TRUE)
pnt = st_point(c(-9, 23)) #נשתמש בקוד שביקשו בשאלה,המכיל את מיקום נקודה בשם PNT
pnt_vert = c(pnt+c(3,0),pnt+c(-3,0))
pnt_vert = st_combine(pnt_vert)
line_vert = st_cast(pnt_vert, "LINESTRING")
buffer_vert = st_buffer(line_vert,1)
pnt_hori = c(pnt+c(0,3),pnt+c(0,-3))
pnt_hori = st_combine(pnt_hori)
line_hori = st_cast(pnt_hori, "LINESTRING")
buffer_hori = st_buffer(line_hori,1)
poly_plus = st_union(buffer_vert,buffer_hori)
plot(poly_plus, col = "grey")
plot(pnt, add = TRUE)
pnt = st_point(c(0, 0)) #נשתמש בקוד שביקשו בשאלה,המכיל את מיקום נקודה בשם PNT
pnt = st_point(c(0, 0)) #נשתמש בקוד שביקשו בשאלה,המכיל את מיקום נקודה בשם PNT
pnt_vert = c(pnt+c(3,0),pnt+c(-3,0))  #נתנו למשתנה הנ"ל את הרווח של הצורה בציר האיקס : זוז עד רוחב 3 ומינוס 3 מהנקודה הראשית לאורך ציר האיקס
pnt_vert = st_combine(pnt_vert)
pnt_vert
pnt_vert = c(pnt+c(3,0),pnt+c(-3,0))  #נתנו למשתנה הנ"ל את הרווח של הצורה בציר האיקס : זוז עד רוחב 3 ומינוס 3 מהנקודה הראשית לאורך ציר האיקס
pnt_vert = st_combine(pnt_vert)
plot(line_vert )
plot(pnt_vert )
line_vert = st_cast(pnt_vert, "LINESTRING")  #
plot(line_vert )
buffer_vert = st_buffer(line_vert,1)
plot(buffer_vert)
plot(pnt_vert )#נתנו למשתנה הנ"ל את הרווח של הצורה בציר האיקס : זוז עד רוחב 3 ומינוס 3 מהנקודה הראשית לאורך ציר האיקס
pnt_vert = c(pnt+c(3,0),pnt+c(-3,0))
pnt_vert = c(pnt+c(3,0),pnt+c(-3,0))
plot(pnt_vert )#נתנו למשתנה הנ"ל את הרווח של הצורה בציר האיקס : זוז עד רוחב 3 ומינוס 3 מהנקודה הראשית לאורך ציר האיקס
pnt_vert = st_combine(pnt_vert)
plot(pnt_vert )
plot(pnt_vert )
pnt_vert = st_combine(pnt_vert)
plot(pnt_vert )
line_vert = st_cast(pnt_vert, "LINESTRING")  #
plot(line_vert)
buffer_vert = st_buffer(line_vert,1)
plot(buffer_vert)
buffer_vert = st_buffer(line_vert,2)
plot(buffer_vert)
buffer_vert = st_buffer(line_vert,3)
plot(buffer_vert)
buffer_vert = st_buffer(line_vert,0.5)
plot(buffer_vert)
line_vert = st_cast(pnt_vert, "LINESTRING")  #
plot(line_vert)
buffer_vert = st_buffer(line_vert,0.2)
plot(buffer_vert)
buffer_vert = st_buffer(line_vert,1)
plot(buffer_vert)
buffer_vert = st_buffer(line_vert,dist= 1)
plot(buffer_vert)
buffer_vert = st_buffer(line_vert,dist= 3)
plot(buffer_vert)
pnt_hori = c(pnt+c(0,3),pnt+c(0,-3))
pnt_hori = c(pnt+c(0,3),pnt+c(0,-3))
plot(pnt_hori)
plot(buffer_vert)
pnt_hori = c(pnt+c(0,3),pnt+c(0,-3))
plot(pnt_hori)
pnt_hori = st_combine(pnt_hori)
line_hori = st_cast(pnt_hori, "LINESTRING")
buffer_hori = st_buffer(line_hori,1)
pnt_hori = st_combine(pnt_hori)
line_hori = st_cast(pnt_hori, "LINESTRING")
buffer_hori = st_buffer(line_hori,1)
library(sf)     #use the sf  R package#
pnt = st_point(c(0, 0)) #Use as required by the above command#
pnt_vert = c(pnt+c(3,0),pnt+c(-3,0)) #Creat 2 point whithin 3 units of distance along the vertical axle and storing the result in the variable pnt_vert #
pnt_vert = st_combine(pnt_vert) #St_combine - Combine several feature geometries into one, without unioning or resolving internal boundaries, so we turn the points from separate points to MULTIPOINT#
line_vert = st_cast(pnt_vert, "LINESTRING")  #Use st_cast to convert our MULTIPOINT geometry pnt_vert to a LINESTRING geometry line_vert#
buffer_vert = st_buffer(line_vert,dist= 1) #Creat new variable name buffer_vert. In it we storing the result of the st_buffer on line_vert that perform buffer distance for line_vert whithin 1 units of distance from it to make a buffer#
pnt_hori = c(pnt+c(0,3),pnt+c(0,-3))  #From this line to line 21, repeat similar commands from Previous lines 4- 13 only in horizontal direction#
pnt_hori = st_combine(pnt_hori)
line_hori = st_cast(pnt_hori, "LINESTRING")
buffer_hori = st_buffer(line_hori,1)
poly_plus = st_union(buffer_vert,buffer_hori) #storing the result of st_union of the horizontal and vertical buffer in the variable poly_plus. st_union combine multiple geometries into a single one and dissolves internal borders.#
plot(poly_plus, col = "grey") #plot the poly_plus variable colored in grey#
plot(pnt, add = TRUE) #plot the pnt point to the existing plot if the poly_plus in color grey#
library(sf)
setwd("/Users/Valer/Desktop/project2/example/examples/example-10-02")
setwd("/Users/valer/Desktop/project2/examples/examples/example-10-02")
install.packages(servr)
detach("package:sf", unload = TRUE)
library(servr)
in
setwd("/Users/valer/Desktop/project2/examples/examples/example-10-05")
httd()
setwd("/Users/valer/Desktop/project2/examples/examples")
httd()
